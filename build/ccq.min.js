function Queue(t){if(void 0===t||null==t)t=1/0;else if(!((t=+t)>=1))throw new Error("Invalid concurrency.");this._concurrency=t,this._tasks=[],this._results=[],this._awaitCallbackInvoked=!1,this._numWaiting=this._numActive=this._numCompleted=0,this._awaitCallback=null}function callAwaitCallback(t){if(t._awaitCallback&&!t._awaitCallbackInvoked&&!t._numWaiting&&!t._numActive){var a=t._results;t._awaitCallbackInvoked=!0,t._awaitCallback(a),t._results=void 0}}Queue.prototype.add=function(t){if("function"!=typeof t)throw new Error("Invalid task.");if(this._awaitCallback)throw new Error("`.await()` has already been called.");var a=Array.prototype.slice.call(arguments,1);return this._tasks.push([t,a]),this._numWaiting+=1,startNextTask(this),this},Queue.prototype.await=function(t){if("function"!=typeof t)throw new Error("Invalid callback.");if(this._awaitCallback)throw new Error("Queue execution has already started.");return this._awaitCallback=t,callAwaitCallback(this),this};var noabort={isError:null};function startNextTask(t){for(;t._numWaiting&&t._numActive<t._concurrency;){var a=t._numActive+t._numCompleted,e=t._tasks[a],i=e[0],n=e[1];n.push(getTaskCallback(t,a)),t._numWaiting-=1,t._numActive+=1;try{i.apply(null,n)}catch(e){if(t._tasks[a])t._results[a]={isError:!0,data:e},t._numActive-=1,t._numCompleted+=1,callAwaitCallback(t);else if(t._awaitCallbackInvoked)throw e}}}function getTaskCallback(t,a){return function(e,i){t._tasks[a]&&(t._numActive-=1,t._numCompleted+=1,t._tasks[a]=null,t._results[a]=null!=e?{isError:!0,data:e}:{isError:!1,data:i},t._numWaiting?startNextTask(t):callAwaitCallback(t))}}!function(t,a){"function"==typeof define&&define.amd?define([],a):"object"==typeof module&&module.exports?module.exports=a():t.returnExports=a()}("undefined"!=typeof self?self:this,function(){return{Queue:Queue}});